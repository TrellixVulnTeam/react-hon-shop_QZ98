{"ast":null,"code":"// import React from \"react\";\n// import { Formik } from \"formik\";\n// import * as EmailValidator from \"email-validator\";\n// import * as Yup from \"yup\";\n// import {\n//   BrowserRouter as Router,Switch,\n//   Link\n// } from \"react-router-dom\";\n// import \"./Login.scss\";\n// const ValidatedLoginForm = () => (\n//   <Formik\n//     initialValues={{ email: \"\", password: \"\" }}\n//     onSubmit={(values, { setSubmitting }) => {\n//       setTimeout(() => {\n//         console.log(\"Logging in\", values);\n//         setSubmitting(false);\n//       }, 500);\n//     }}\n//********Handling validation messages yourself*******/\n// validate={values => {\n//   let errors = {};\n//   if (!values.email) {\n//     errors.email = \"Required\";\n//   } else if (!EmailValidator.validate(values.email)) {\n//     errors.email = \"Invalid email address\";\n//   }\n//   const passwordRegex = /(?=.*[0-9])/;\n//   if (!values.password) {\n//     errors.password = \"Required\";\n//   } else if (values.password.length < 8) {\n//     errors.password = \"Password must be 8 characters long.\";\n//   } else if (!passwordRegex.test(values.password)) {\n//     errors.password = \"Invalida password. Must contain one number\";\n//   }\n//   return errors;\n// }}\n//********Using Yum for validation********/\n//     validationSchema={Yup.object().shape({\n//       email: Yup.string().email().required(\"Required\"),\n//       password: Yup.string()\n//         .required(\"No password provided.\")\n//         .min(8, \"Password is too short - should be 8 chars minimum.\")\n//         .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n//     })}\n//   >\n//     {(props) => {\n//       const {\n//         values,\n//         touched,\n//         errors,\n//         isSubmitting,\n//         handleChange,\n//         handleBlur,\n//         handleSubmit\n//       } = props;\n//       return (\n//         <form onSubmit={handleSubmit} className=\"main-login\">\n//           <label htmlFor=\"email\" className=\"email-login\">Email</label><br/>\n//           <input\n//             name=\"email\"\n//             type=\"text\"\n//             placeholder=\"Enter your email\"\n//             value={values.email}\n//             onChange={handleChange}\n//             onBlur={handleBlur}\n//             className={errors.email && touched.email && \"error\"}\n//             className=\"input-login\"\n//           /><br/><br/>\n//           {errors.email && touched.email && (\n//             <div className=\"input-feedback\">*{errors.email}</div>\n//           )}\n//           <label htmlFor=\"email\" className=\"password-login\">Password</label><br/>\n//           <input\n//             name=\"password\"\n//             type=\"password\"\n//             placeholder=\"Enter your password\"\n//             value={values.password}\n//             onChange={handleChange}\n//             onBlur={handleBlur}\n//             className={errors.password && touched.password && \"error\"}\n//             className=\"input-login\"\n//           /><br/><br/>\n//           {errors.password && touched.password && (\n//             <div className=\"input-feedback1\">*{errors.password}</div>\n//           )}\n//           <button type=\"submit\" disabled={isSubmitting} className=\"login-button\">\n//             Login\n//           </button>\n//        <Link to=\"./signup\"><button className=\"signup-button\" type=\"submit\" disabled={isSubmitting}>\n//             Signup\n//           </button></Link>   \n//         </form>\n//       );\n//     }}\n//   </Formik>\n// );\n// export default ValidatedLoginForm;","map":{"version":3,"sources":["/Users/abhishekkumar/Desktop/hon-shopping/src/components/ValidatedLoginForm.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from \"react\";\n// import { Formik } from \"formik\";\n// import * as EmailValidator from \"email-validator\";\n// import * as Yup from \"yup\";\n// import {\n//   BrowserRouter as Router,Switch,\n//   Link\n// } from \"react-router-dom\";\n// import \"./Login.scss\";\n// const ValidatedLoginForm = () => (\n//   <Formik\n//     initialValues={{ email: \"\", password: \"\" }}\n//     onSubmit={(values, { setSubmitting }) => {\n//       setTimeout(() => {\n//         console.log(\"Logging in\", values);\n//         setSubmitting(false);\n//       }, 500);\n//     }}\n    //********Handling validation messages yourself*******/\n    // validate={values => {\n    //   let errors = {};\n    //   if (!values.email) {\n    //     errors.email = \"Required\";\n    //   } else if (!EmailValidator.validate(values.email)) {\n    //     errors.email = \"Invalid email address\";\n    //   }\n\n    //   const passwordRegex = /(?=.*[0-9])/;\n    //   if (!values.password) {\n    //     errors.password = \"Required\";\n    //   } else if (values.password.length < 8) {\n    //     errors.password = \"Password must be 8 characters long.\";\n    //   } else if (!passwordRegex.test(values.password)) {\n    //     errors.password = \"Invalida password. Must contain one number\";\n    //   }\n\n    //   return errors;\n    // }}\n    //********Using Yum for validation********/\n\n//     validationSchema={Yup.object().shape({\n//       email: Yup.string().email().required(\"Required\"),\n//       password: Yup.string()\n//         .required(\"No password provided.\")\n//         .min(8, \"Password is too short - should be 8 chars minimum.\")\n//         .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n//     })}\n//   >\n//     {(props) => {\n//       const {\n//         values,\n//         touched,\n//         errors,\n//         isSubmitting,\n//         handleChange,\n//         handleBlur,\n//         handleSubmit\n//       } = props;\n//       return (\n//         <form onSubmit={handleSubmit} className=\"main-login\">\n//           <label htmlFor=\"email\" className=\"email-login\">Email</label><br/>\n//           <input\n//             name=\"email\"\n//             type=\"text\"\n//             placeholder=\"Enter your email\"\n//             value={values.email}\n//             onChange={handleChange}\n//             onBlur={handleBlur}\n//             className={errors.email && touched.email && \"error\"}\n//             className=\"input-login\"\n\n//           /><br/><br/>\n//           {errors.email && touched.email && (\n//             <div className=\"input-feedback\">*{errors.email}</div>\n//           )}\n//           <label htmlFor=\"email\" className=\"password-login\">Password</label><br/>\n//           <input\n//             name=\"password\"\n//             type=\"password\"\n//             placeholder=\"Enter your password\"\n//             value={values.password}\n//             onChange={handleChange}\n//             onBlur={handleBlur}\n//             className={errors.password && touched.password && \"error\"}\n//             className=\"input-login\"\n//           /><br/><br/>\n//           {errors.password && touched.password && (\n//             <div className=\"input-feedback1\">*{errors.password}</div>\n//           )}\n//           <button type=\"submit\" disabled={isSubmitting} className=\"login-button\">\n//             Login\n//           </button>\n\n//        <Link to=\"./signup\"><button className=\"signup-button\" type=\"submit\" disabled={isSubmitting}>\n//             Signup\n//           </button></Link>   \n//         </form>\n//       );\n//     }}\n//   </Formik>\n// );\n\n// export default ValidatedLoginForm;\n"]},"metadata":{},"sourceType":"module"}