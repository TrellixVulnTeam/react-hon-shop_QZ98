{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/Desktop/hon-shopping/src/components/ValidatedLoginForm.js\";\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\nimport { BrowserRouter as Router, Switch, Link } from \"react-router-dom\";\nimport \"./Login.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ValidatedLoginForm = () => /*#__PURE__*/_jsxDEV(Formik, {\n  initialValues: {\n    email: \"\",\n    password: \"\"\n  },\n  onSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      console.log(\"Logging in\", values);\n      setSubmitting(false);\n    }, 500);\n  } //********Handling validation messages yourself*******/\n  // validate={values => {\n  //   let errors = {};\n  //   if (!values.email) {\n  //     errors.email = \"Required\";\n  //   } else if (!EmailValidator.validate(values.email)) {\n  //     errors.email = \"Invalid email address\";\n  //   }\n  //   const passwordRegex = /(?=.*[0-9])/;\n  //   if (!values.password) {\n  //     errors.password = \"Required\";\n  //   } else if (values.password.length < 8) {\n  //     errors.password = \"Password must be 8 characters long.\";\n  //   } else if (!passwordRegex.test(values.password)) {\n  //     errors.password = \"Invalida password. Must contain one number\";\n  //   }\n  //   return errors;\n  // }}\n  //********Using Yum for validation********/\n  ,\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email().required(\"Required\"),\n    password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n  }),\n  children: props => {\n    const {\n      values,\n      touched,\n      errors,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit\n    } = props;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"main-login\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        className: \"email-login\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"text\",\n        placeholder: \"Enter your email\",\n        value: values.email,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.email && touched.email && \"error\",\n        className: \"input-login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 18\n      }, this), errors.email && touched.email && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-feedback\",\n        children: [\"*\", errors.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        className: \"password-login\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 77\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter your password\",\n        value: values.password,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.password && touched.password && \"error\",\n        className: \"input-login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 18\n      }, this), errors.password && touched.password && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-feedback1\",\n        children: [\"*\", errors.password]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        className: \"login-button\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"./signup\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"signup-button\",\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: \"Signup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\n_c = ValidatedLoginForm;\nexport default ValidatedLoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidatedLoginForm\");","map":{"version":3,"sources":["/Users/abhishekkumar/Desktop/hon-shopping/src/components/ValidatedLoginForm.js"],"names":["React","Formik","EmailValidator","Yup","BrowserRouter","Router","Switch","Link","ValidatedLoginForm","email","password","values","setSubmitting","setTimeout","console","log","object","shape","string","required","min","matches","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\nimport {\n  BrowserRouter as Router,Switch,\n  Link\n} from \"react-router-dom\";\nimport \"./Login.scss\";\nconst ValidatedLoginForm = () => (\n  <Formik\n    initialValues={{ email: \"\", password: \"\" }}\n    onSubmit={(values, { setSubmitting }) => {\n      setTimeout(() => {\n        console.log(\"Logging in\", values);\n        setSubmitting(false);\n      }, 500);\n    }}\n    //********Handling validation messages yourself*******/\n    // validate={values => {\n    //   let errors = {};\n    //   if (!values.email) {\n    //     errors.email = \"Required\";\n    //   } else if (!EmailValidator.validate(values.email)) {\n    //     errors.email = \"Invalid email address\";\n    //   }\n\n    //   const passwordRegex = /(?=.*[0-9])/;\n    //   if (!values.password) {\n    //     errors.password = \"Required\";\n    //   } else if (values.password.length < 8) {\n    //     errors.password = \"Password must be 8 characters long.\";\n    //   } else if (!passwordRegex.test(values.password)) {\n    //     errors.password = \"Invalida password. Must contain one number\";\n    //   }\n\n    //   return errors;\n    // }}\n    //********Using Yum for validation********/\n\n    validationSchema={Yup.object().shape({\n      email: Yup.string().email().required(\"Required\"),\n      password: Yup.string()\n        .required(\"No password provided.\")\n        .min(8, \"Password is too short - should be 8 chars minimum.\")\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    })}\n  >\n    {(props) => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      return (\n        <form onSubmit={handleSubmit} className=\"main-login\">\n          <label htmlFor=\"email\" className=\"email-login\">Email</label><br/>\n          <input\n            name=\"email\"\n            type=\"text\"\n            placeholder=\"Enter your email\"\n            value={values.email}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={errors.email && touched.email && \"error\"}\n            className=\"input-login\"\n\n          /><br/><br/>\n          {errors.email && touched.email && (\n            <div className=\"input-feedback\">*{errors.email}</div>\n          )}\n          <label htmlFor=\"email\" className=\"password-login\">Password</label><br/>\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n            value={values.password}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={errors.password && touched.password && \"error\"}\n            className=\"input-login\"\n          /><br/><br/>\n          {errors.password && touched.password && (\n            <div className=\"input-feedback1\">*{errors.password}</div>\n          )}\n          <button type=\"submit\" disabled={isSubmitting} className=\"login-button\">\n            Login\n          </button>\n\n       <Link to=\"./signup\"><button className=\"signup-button\" type=\"submit\" disabled={isSubmitting}>\n            Signup\n          </button></Link>   \n        </form>\n      );\n    }}\n  </Formik>\n);\n\nexport default ValidatedLoginForm;\n"]},"metadata":{},"sourceType":"module"}